{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/mpechardo/Desktop/NVIDIA/Research Labs Template Hub/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3;import React from'react';import styled from'styled-components';import CodeContainer from'./CodeContainer';import CodeBlockWithExpand from'../Shared/CodeBlockWithExpand';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ShowcaseContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin-bottom: 2rem;\\n  padding: 2rem;\\n  background-color: var(--color-gray-0);\\n  border-radius: 8px;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n\"])));const ShowcaseTitle=styled.h2(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  font-size: 24px;\\n  text-transform: uppercase;\\n\"])));const ExampleContainer=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  border: 1px solid var(--color-gray-200);\\n  border-radius: 4px;\\n  margin: 1rem 0;\\n\"])));const CodeContainerShowcase=()=>{const exampleCode=\"// Example code for scene generation\\nfunction generateScene(description) {\\n  // Initialize scene\\n  const scene = new Scene();\\n\\n  // Process text description\\n  const objects = processDescription(description);\\n\\n  // Add objects to scene\\n  objects.forEach(obj => {\\n    scene.add(obj);\\n  });\\n\\n  return scene;\\n}\";const sectionCode=\"<!-- ===== Code Container Section: Example code block with NVIDIA styling ===== -->\\n<!-- This section displays a code example with proper syntax highlighting and styling -->\\n<div class=\\\"nv-section\\\">\\n  <!-- Container to center and limit the width of the content -->\\n  <div class=\\\"nv-container\\\">\\n    \\n    <!-- ===== SECTION TITLE ===== -->\\n    <!-- The main heading for this code example section -->\\n    <div class=\\\"nv-h--medium mb-3\\\">\\n      Code Example\\n    </div>\\n    <!-- ===== END SECTION TITLE ===== -->\\n    \\n    <!-- ===== SECTION DESCRIPTION ===== -->\\n    <!-- The descriptive text that explains what this code example shows -->\\n    <p class=\\\"nv-text-large mb-5\\\">\\n      Here's an example of how to use our scene generation function.\\n    </p>\\n    <!-- ===== END SECTION DESCRIPTION ===== -->\\n    \\n    <!-- ===== CODE CONTAINER ===== -->\\n    <!-- The wrapper for the code block with NVIDIA styling -->\\n    <div class=\\\"nv-code-container\\\">\\n      \\n      <!-- ===== CODE BLOCK ===== -->\\n      <!-- The pre element that contains the formatted code -->\\n      <pre class=\\\"nv-code-block\\\">\\n        <!-- ===== CODE ELEMENT ===== -->\\n        <!-- The code element with the actual code content -->\\n        <code>// Example code for scene generation\\nfunction generateScene(description) {\\n  // Initialize scene\\n  const scene = new Scene();\\n\\n  // Process text description\\n  const objects = processDescription(description);\\n\\n  // Add objects to scene\\n  objects.forEach(obj => {\\n    scene.add(obj);\\n  });\\n\\n  return scene;\\n}</code>\\n        <!-- ===== END CODE ELEMENT ===== -->\\n      </pre>\\n      <!-- ===== END CODE BLOCK ===== -->\\n      \\n    </div>\\n    <!-- ===== END CODE CONTAINER ===== -->\\n    \\n  </div>\\n</div>\\n<!-- ===== End Code Container Section ===== -->\";return/*#__PURE__*/_jsxs(ShowcaseContainer,{children:[/*#__PURE__*/_jsx(ShowcaseTitle,{children:\"Code Container\"}),/*#__PURE__*/_jsx(\"p\",{children:\"A component for displaying code examples with NVIDIA styling.\"}),/*#__PURE__*/_jsx(ExampleContainer,{children:/*#__PURE__*/_jsx(CodeContainer,{title:\"Code Example\",description:\"Here's an example of how to use our scene generation function.\",code:exampleCode,language:\"javascript\"})}),/*#__PURE__*/_jsx(CodeBlockWithExpand,{code:sectionCode})]});};export default CodeContainerShowcase;","map":{"version":3,"names":["React","styled","CodeContainer","CodeBlockWithExpand","jsx","_jsx","jsxs","_jsxs","ShowcaseContainer","div","_templateObject","_taggedTemplateLiteral","ShowcaseTitle","h2","_templateObject2","ExampleContainer","_templateObject3","CodeContainerShowcase","exampleCode","sectionCode","children","title","description","code","language"],"sources":["/Users/mpechardo/Desktop/NVIDIA/Research Labs Template Hub/src/components/CodeContainer/CodeContainerShowcase.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport CodeContainer from './CodeContainer';\nimport CodeBlockWithExpand from '../Shared/CodeBlockWithExpand';\n\nconst ShowcaseContainer = styled.div`\n  margin-bottom: 2rem;\n  padding: 2rem;\n  background-color: var(--color-gray-0);\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nconst ShowcaseTitle = styled.h2`\n  font-size: 24px;\n  text-transform: uppercase;\n`;\n\nconst ExampleContainer = styled.div`\n  border: 1px solid var(--color-gray-200);\n  border-radius: 4px;\n  margin: 1rem 0;\n`;\n\nconst CodeContainerShowcase = () => {\n  const exampleCode = `// Example code for scene generation\\nfunction generateScene(description) {\\n  // Initialize scene\\n  const scene = new Scene();\\n\\n  // Process text description\\n  const objects = processDescription(description);\\n\\n  // Add objects to scene\\n  objects.forEach(obj => {\\n    scene.add(obj);\\n  });\\n\\n  return scene;\\n}`;\n\n  const sectionCode = `<!-- ===== Code Container Section: Example code block with NVIDIA styling ===== -->\n<!-- This section displays a code example with proper syntax highlighting and styling -->\n<div class=\"nv-section\">\n  <!-- Container to center and limit the width of the content -->\n  <div class=\"nv-container\">\n    \n    <!-- ===== SECTION TITLE ===== -->\n    <!-- The main heading for this code example section -->\n    <div class=\"nv-h--medium mb-3\">\n      Code Example\n    </div>\n    <!-- ===== END SECTION TITLE ===== -->\n    \n    <!-- ===== SECTION DESCRIPTION ===== -->\n    <!-- The descriptive text that explains what this code example shows -->\n    <p class=\"nv-text-large mb-5\">\n      Here's an example of how to use our scene generation function.\n    </p>\n    <!-- ===== END SECTION DESCRIPTION ===== -->\n    \n    <!-- ===== CODE CONTAINER ===== -->\n    <!-- The wrapper for the code block with NVIDIA styling -->\n    <div class=\"nv-code-container\">\n      \n      <!-- ===== CODE BLOCK ===== -->\n      <!-- The pre element that contains the formatted code -->\n      <pre class=\"nv-code-block\">\n        <!-- ===== CODE ELEMENT ===== -->\n        <!-- The code element with the actual code content -->\n        <code>// Example code for scene generation\\nfunction generateScene(description) {\\n  // Initialize scene\\n  const scene = new Scene();\\n\\n  // Process text description\\n  const objects = processDescription(description);\\n\\n  // Add objects to scene\\n  objects.forEach(obj => {\\n    scene.add(obj);\\n  });\\n\\n  return scene;\\n}</code>\n        <!-- ===== END CODE ELEMENT ===== -->\n      </pre>\n      <!-- ===== END CODE BLOCK ===== -->\n      \n    </div>\n    <!-- ===== END CODE CONTAINER ===== -->\n    \n  </div>\n</div>\n<!-- ===== End Code Container Section ===== -->`;\n\n  return (\n    <ShowcaseContainer>\n      <ShowcaseTitle>Code Container</ShowcaseTitle>\n      <p>A component for displaying code examples with NVIDIA styling.</p>\n\n      {/* ===== Code Container Section: Example code block with NVIDIA styling ===== */}\n      <ExampleContainer>\n        <CodeContainer\n          title=\"Code Example\"\n          description=\"Here's an example of how to use our scene generation function.\"\n          code={exampleCode}\n          language=\"javascript\"\n        />\n      </ExampleContainer>\n      {/* ===== End Code Container Section ===== */}\n\n      <CodeBlockWithExpand code={sectionCode} />\n    </ShowcaseContainer>\n  );\n};\n\nexport default CodeContainerShowcase; "],"mappings":"sNAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,MAAO,CAAAC,mBAAmB,KAAM,+BAA+B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhE,KAAM,CAAAC,iBAAiB,CAAGP,MAAM,CAACQ,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,kKAMnC,CAED,KAAM,CAAAC,aAAa,CAAGX,MAAM,CAACY,EAAE,CAAAC,gBAAA,GAAAA,gBAAA,CAAAH,sBAAA,4DAG9B,CAED,KAAM,CAAAI,gBAAgB,CAAGd,MAAM,CAACQ,GAAG,CAAAO,gBAAA,GAAAA,gBAAA,CAAAL,sBAAA,gGAIlC,CAED,KAAM,CAAAM,qBAAqB,CAAGA,CAAA,GAAM,CAClC,KAAM,CAAAC,WAAW,mUAAqU,CAEtV,KAAM,CAAAC,WAAW,wxDAuC6B,CAE9C,mBACEZ,KAAA,CAACC,iBAAiB,EAAAY,QAAA,eAChBf,IAAA,CAACO,aAAa,EAAAQ,QAAA,CAAC,gBAAc,CAAe,CAAC,cAC7Cf,IAAA,MAAAe,QAAA,CAAG,+DAA6D,CAAG,CAAC,cAGpEf,IAAA,CAACU,gBAAgB,EAAAK,QAAA,cACff,IAAA,CAACH,aAAa,EACZmB,KAAK,CAAC,cAAc,CACpBC,WAAW,CAAC,gEAAgE,CAC5EC,IAAI,CAAEL,WAAY,CAClBM,QAAQ,CAAC,YAAY,CACtB,CAAC,CACc,CAAC,cAGnBnB,IAAA,CAACF,mBAAmB,EAACoB,IAAI,CAAEJ,WAAY,CAAE,CAAC,EACzB,CAAC,CAExB,CAAC,CAED,cAAe,CAAAF,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}